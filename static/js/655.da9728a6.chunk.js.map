{"version":3,"file":"static/js/655.da9728a6.chunk.js","mappings":"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","sources":["components/atoms/Button/index.tsx","components/atoms/Input/index.tsx","components/molecules/CrudItem/index.tsx","components/organisms/Card/index.tsx","components/organisms/CrudList/index.tsx","components/organisms/DeleteModalContent/index.tsx","components/organisms/HeaderCrud/index.tsx","components/organisms/MobileWrapper/index.tsx","i18n/business.ts","i18n/general.ts","i18n/person.ts","services/axios.ts","components/organisms/BusinessForm/index.tsx","store/actions/businessActions.tsx","store/actions/data.ts","templates/Crud/index.tsx"],"sourcesContent":["import React from \"react\";\nimport \"./button.scoped.scss\";\n\ninterface Props {\n  backgroundColor?: string;\n  textColor?: string;\n  border?: string;\n  width?: string;\n  padding?: string;\n  children?: React.ReactNode;\n  [x: string]: any;\n}\n\nexport const Button = ({ backgroundColor = \"black\", textColor = \"white\", border = \"\", width = \"100%\", padding = \" 14px 24px\", children, ...rest }: Props) => {\n  const style = {\n    \"--textColor\": textColor,\n    \"--backgroundColor\": backgroundColor,\n    \"--border\": border,\n    \"--width\": width,\n    \"--padding\": padding,\n  } as React.CSSProperties;\n\n  return (\n    <button className=\"a-button\" style={style} {...rest}>\n      {children}\n    </button>\n  );\n};\n","import { FormikValues } from \"formik\";\nimport React from \"react\";\nimport \"./input.scoped.scss\";\n\ninterface Props {\n  formik?: FormikValues;\n  labelText?: string;\n  [x: string]: any;\n}\n\nexport const Input = ({ formik, labelText = \"\", ...rest }: Props) => {\n  return (\n    <div className=\"a-input\">\n      <label className=\"a-input__label\" htmlFor={rest.id}>\n        {labelText}\n        <input {...rest} className=\"a-input__input\" />\n      </label>\n      {formik && <div className=\"a-input__error\">{formik.touched[rest.id] && formik.errors[rest.id]}</div>}\n    </div>\n  );\n};\n","import React, { MouseEvent } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { ReactSVG } from \"react-svg\";\nimport \"./crud-item.scoped.scss\";\n\ninterface Props {\n  name?: string;\n  handleEdit: (item: any, e: React.MouseEvent<HTMLButtonElement, globalThis.MouseEvent>) => void;\n  id?: string;\n  handleDelete: (item: any, e: React.MouseEvent<HTMLButtonElement, globalThis.MouseEvent>) => void;\n  mutedText?: string;\n  withLink?: boolean;\n  item?: any;\n  hoverable?: boolean;\n  withActions?: boolean;\n  canEdit?: boolean;\n  canDelete?: boolean;\n  editIconName?: string;\n}\n\ninterface ConditionalProps {\n  condition: boolean;\n  wrapper: (children: any) => any;\n  children: any;\n}\n\nconst ConditionalWrapper = ({ condition, wrapper, children }: ConditionalProps) => (condition ? wrapper(children) : children);\n\nexport const CrudItem = ({\n  name,\n  handleEdit,\n  id,\n  handleDelete,\n  mutedText,\n  withLink = false,\n  item,\n  hoverable,\n  withActions,\n  canEdit = true,\n  canDelete = true,\n  editIconName = \"pen\",\n}: Props) => {\n  const liClasses = () => {\n    if (hoverable) {\n      return \"m-crudItem --hoverable\";\n    } else {\n      return \"m-crudItem\";\n    }\n  };\n  return (\n    <>\n      <ConditionalWrapper condition={withLink} wrapper={(children) => <Link to={`/overview/${id}`}>{children}</Link>}>\n        <li className={liClasses()}>\n          <div className=\"m-crudItem__textsContainer\">\n            <div className=\"m-crudItem__textsContainer__text\">{name}</div>\n            {mutedText && (\n              <div\n                className=\"\n            m-crudItem__textsContainer__text --muted\"\n              >\n                {mutedText}\n              </div>\n            )}\n          </div>\n          {withActions && (\n            <div className=\"m-crudItem__buttonsContainer\">\n              {canEdit && (\n                <button onClick={(e) => handleEdit(item, e)} className=\"m-crudItem__buttonsContainer__icon\">\n                  <ReactSVG src={`/icons/${editIconName}.svg`} />\n                </button>\n              )}\n              {canDelete && (\n                <button onClick={(e) => handleDelete(item, e)} className=\"m-crudItem__buttonsContainer__icon\">\n                  <ReactSVG src={`/icons/trash.svg`} />\n                </button>\n              )}\n            </div>\n          )}\n        </li>\n      </ConditionalWrapper>\n    </>\n  );\n};\n","import { CrudItem } from \"components/molecules/CrudItem\";\nimport React from \"react\";\nimport \"./card.scoped.scss\";\n\ninterface Props {\n  name: string;\n  mutedText: string;\n  additional1: any;\n  additional2: any;\n  id: string;\n  handleEdit: (item: any, e: React.MouseEvent<HTMLButtonElement, globalThis.MouseEvent>) => void;\n  handleDelete: (item: any, e: React.MouseEvent<HTMLButtonElement, globalThis.MouseEvent>) => void;\n  item: any;\n  canEdit?: boolean;\n  canDelete?: boolean;\n  editIconName?: string;\n}\n\nexport const Card = ({\n  name,\n  mutedText,\n  additional1,\n  additional2,\n  handleDelete,\n  id,\n  handleEdit,\n  item,\n  canEdit = true,\n  canDelete = true,\n  editIconName,\n}: Props) => {\n  return (\n    <article className=\"o-card\">\n      <section className=\"o-card__header\">\n        <CrudItem\n          withActions\n          item={item}\n          name={name}\n          mutedText={mutedText}\n          handleDelete={handleDelete}\n          handleEdit={handleEdit}\n          id={id}\n          canEdit={canEdit}\n          canDelete={canDelete}\n          editIconName={editIconName}\n        />\n      </section>\n      <section className=\"o-card__body\">\n        <div className=\"o-card__body__text1\">{additional1}</div>\n        <div className=\"o-card__body__text2\">{additional2}</div>\n      </section>\n    </article>\n  );\n};\n","import { LoadingSpinner } from \"components/atoms/LoadingSpinner\";\nimport { CrudItem } from \"components/molecules/CrudItem\";\nimport React from \"react\";\nimport { Card } from \"../Card\";\nimport \"./crud-list.scoped.scss\";\n\ninterface Props {\n  isLoading?: boolean;\n  withError?: boolean;\n  data?: any;\n  handleCreate?: () => void;\n  handleEdit: (item: any, e: React.MouseEvent<HTMLButtonElement, globalThis.MouseEvent>) => void;\n  handleDelete: (item: any, e: React.MouseEvent<HTMLButtonElement, globalThis.MouseEvent>) => void;\n  currentView?: number;\n  withLink?: boolean;\n  canEdit?: boolean;\n  canDelete?: boolean;\n  withActions?: boolean;\n  editIconName?: string;\n}\n\nexport const CrudList = ({\n  isLoading,\n  withError,\n  data,\n  handleEdit,\n  handleDelete,\n  currentView = 0,\n  withLink,\n  canEdit = true,\n  canDelete = true,\n  withActions = true,\n  editIconName,\n}: Props) => {\n  const UlClassName = currentView === 0 ? \"o-crudList \" : \"o-crudList --gallery\";\n\n  return (\n    <>\n      {!isLoading && !withError && (\n        <ul className={UlClassName}>\n          {React.Children.toArray(\n            data.map((item: Record<string, string>, index: number) => (\n              <>\n                {currentView === 0 ? (\n                  <CrudItem\n                    hoverable\n                    id={item.id}\n                    name={item.name}\n                    handleEdit={handleEdit}\n                    handleDelete={handleDelete}\n                    withLink={withLink}\n                    item={item}\n                    withActions={withActions}\n                    canEdit={canEdit}\n                    canDelete={canDelete}\n                    editIconName={editIconName}\n                  />\n                ) : (\n                  <Card\n                    id={item.id}\n                    name={item.name}\n                    mutedText={item.role}\n                    additional1={item.phone}\n                    additional2={item.email}\n                    handleDelete={handleDelete}\n                    handleEdit={handleEdit}\n                    item={item}\n                    canEdit={canEdit}\n                    canDelete={canDelete}\n                    editIconName={editIconName}\n                  />\n                )}\n                {index + 1 < data.length && currentView === 0 ? <hr className=\"o-crudList__separator\" /> : null}\n              </>\n            ))\n          )}\n        </ul>\n      )}\n      {isLoading && <LoadingSpinner />}\n    </>\n  );\n};\n","import { Button } from \"components/atoms/Button\";\nimport React from \"react\";\nimport \"./delete-modal-content.scoped.scss\";\n\ninterface Props {\n  elementName: string;\n  onCancel: () => void;\n  onConfirmClick: () => void;\n  cancelButtonText?: string;\n  submitButtonText?: string;\n  confirmText?: string;\n}\n\nexport const DeleteModalContent = ({\n  elementName,\n  onCancel,\n  onConfirmClick,\n  cancelButtonText = \"Cancel\",\n  submitButtonText = \"Remove\",\n  confirmText = \"Are you sure to delete\",\n}: Props) => {\n  return (\n    <div className=\"o-deleteModalContent\">\n      <p className=\"o-deleteModalContent__title\">\n        {confirmText} {elementName}?\n      </p>\n      <div className=\"o-deleteModalContent__buttons\">\n        <Button type=\"button\" backgroundColor=\"#F8F8F8\" textColor=\"Black\" onClick={onCancel}>\n          {cancelButtonText}\n        </Button>\n        <Button type=\"submit\" backgroundColor=\"#FFD5D5\" textColor=\"#9A0000\" onClick={onConfirmClick}>\n          {submitButtonText}\n        </Button>\n      </div>\n    </div>\n  );\n};\n","import \"./header-crud.scoped.scss\";\n\nimport { useMobile } from \"@hooks/useMobile\";\n\ninterface Props {\n  title?: string;\n  children?: any;\n  responsive?: boolean;\n  actions?: any;\n}\n\nexport const HeaderCrud = ({ title, children, responsive, actions }: Props) => {\n  // 0 -> Lines\n  // 1 -> Gallery\n\n  const [isMobile] = useMobile();\n\n  /* const gallery = {\n    0: \"/icons/squares.svg\",\n    1: \"/icons/list.svg\",\n  };\n  const changeView = () => {\n    currentView === 0 ? handleUpdateView(1) : handleUpdateView(0);\n  }; */\n\n  return (\n    <div className={isMobile && responsive ? \"o-headerCrud --mobile\" : \"o-headerCrud\"}>\n      <div className=\"o-headerCrud__principal\">\n        <h2 className={isMobile && responsive ? \"o-headerCrud__title --mobile\" : \"o-headerCrud__title\"}>{title}</h2>\n        <div className=\"o-headerCrud__actions\">{actions}</div>\n      </div>\n      <div className=\"o-headerCrud__secondary\">{children}</div>\n    </div>\n  );\n};\n","import { Button } from \"components/atoms/Button\";\nimport { useMobile } from \"hooks/useMobile\";\nimport { ReactSVG } from \"react-svg\";\nimport \"./mobile-wrapper.scoped.scss\";\n\ninterface Props {\n  children: any;\n  onButtonClick: () => void;\n  goBackText?: string;\n}\n\nexport const MobileWrapper = ({ children, onButtonClick, goBackText = \"Back\" }: Props) => {\n  const [isMobile] = useMobile();\n  return (\n    <>\n      {isMobile && (\n        <div className=\"o-mobileWrapper\">\n          <Button backgroundColor=\"transparent\" textColor=\"#000000\" width=\"fit-content\" padding=\"0\" onClick={onButtonClick}>\n            <ReactSVG src=\"/icons/left-arrow.svg\" />\n            {goBackText}\n          </Button>\n        </div>\n      )}\n      {children}\n    </>\n  );\n};\n","import { TFunction } from \"i18next\";\n\nexport const businessStaticData = (t: TFunction) => ({\n  title: t(\"Businesses\"),\n  actions: {\n    create: t(\"Create business\"),\n    edit: t(\"Edit business\"),\n    delete: t(\"Delete business\"),\n  },\n  responses: {\n    created: t(\"Business created\"),\n    deleted: t(\"Business deleted\"),\n    updated: t(\"Business updated\"),\n  },\n  fields: {\n    name: t(\"Name\"),\n  },\n});\n","import { TFunction } from \"i18next\";\n\nexport const generalStaticData = (t: TFunction) => ({\n  title: t(\"Businesses\"),\n  actions: {\n    create: t(\"Create\"),\n    cancel: t(\"Cancel\"),\n    update: t(\"Update\"),\n    delete: t(\"Delete\"),\n    save: t(\"Save\"),\n    back: t(\"Back\"),\n  },\n  confirm: {\n    delete: t(\"Are you sure you want to delete\"),\n  },\n  responses: {\n    deleted: t(\"Deleted\"),\n  },\n  fields: {\n    required: t(\"This field is required\"),\n  },\n});\n","import { TFunction } from \"i18next\";\n\nexport const personStaticData = (t: TFunction) => ({\n  title: t(\"Persons\"),\n  actions: {\n    create: t(\"Create person\"),\n    edit: t(\"Edit person\"),\n    delete: t(\"Delete person\"),\n  },\n  responses: {\n    created: t(\"Person created\"),\n    deleted: t(\"Person deleted\"),\n    updated: t(\"Person updated\"),\n  },\n  fields: {\n    personName: t(\"Person name\"),\n    role: t(\"Role\"),\n    email: t(\"Email\"),\n    phone: t(\"Phone\"),\n    joinDate: t(\"Join date\"),\n    invalidEmail: t(\"Invalid email address\"),\n    dateShouldBeInPast: t(\"Date must be in the past\"),\n  },\n});\n","import Axios from \"axios\";\n\nexport const apiInstance = Axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  timeout: 5000,\n  headers: {\n    \"x-api-key\": process.env.REACT_APP_API_KEY as string,\n  },\n});\n","import React, { useEffect, useState } from \"react\";\nimport \"./create-form.scoped.scss\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Button } from \"@components/atoms/Button\";\nimport { Input } from \"@components/atoms/Input\";\nimport { useMobile } from \"@hooks/useMobile\";\nimport { BusinessEntity } from \"types/store\";\nimport { useTranslation } from \"react-i18next\";\nimport { generalStaticData } from \"../../../i18n/general\";\n\ninterface Props {\n  initialValues?: BusinessEntity;\n  title?: string;\n  onCancel?: () => void;\n  submitButtonText?: string;\n  handleUpdate?: () => void;\n  id?: string;\n  currentName?: string;\n  onSubmit: (values: BusinessEntity) => void;\n  canDeleteInMobile?: boolean;\n  onDelete?: () => void;\n  cancelButtonText?: string;\n  deleteButtonText?: string;\n}\n\nconst defaultInitialValues = {\n  id: \"\",\n  name: \"\",\n};\n\nexport const BusinessForm = ({\n  initialValues = defaultInitialValues,\n  title,\n  onCancel,\n  submitButtonText,\n  onSubmit,\n  canDeleteInMobile = false,\n  onDelete,\n  cancelButtonText = \"Cancel\",\n  deleteButtonText = \"Delete\",\n}: Props) => {\n  const [isMobile] = useMobile();\n  const [mobileClass, setMobileClass] = useState<string>();\n  const { t } = useTranslation([\"translation\"]);\n\n  useEffect(() => {\n    setMobileClass(isMobile ? \"--mobile\" : \"\");\n  }, [isMobile]);\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema: Yup.object({\n      name: Yup.string().required(generalStaticData(t).fields.required),\n    }),\n    onSubmit: (values) => onSubmit(values),\n  });\n  return (\n    <div className=\"o-createForm\">\n      <h3 className=\"o-createForm__title\">{title}</h3>\n\n      <form className=\"o-createForm__form\" onSubmit={formik.handleSubmit}>\n        <Input formik={formik} type=\"text\" id=\"name\" {...formik.getFieldProps(\"name\")} />\n\n        <div className={`o-createForm__buttons ${mobileClass}`}>\n          {!isMobile && (\n            <Button type=\"button\" onClick={onCancel} backgroundColor=\"#F8F8F8\" textColor=\"Black\">\n              {cancelButtonText}\n            </Button>\n          )}\n          {isMobile && canDeleteInMobile && (\n            <Button type=\"button\" onClick={onDelete} backgroundColor=\"#ffffff\" textColor=\"#E32900\" border=\"solid 1px #E32900\">\n              {deleteButtonText}\n            </Button>\n          )}\n          <Button type=\"submit\">{submitButtonText}</Button>\n        </div>\n      </form>\n    </div>\n  );\n};\n","import { DeleteModalContent } from \"components/organisms/DeleteModalContent\";\nimport { BusinessForm } from \"components/organisms/BusinessForm\";\nimport { apiInstance } from \"services/axios\";\nimport { types } from \"store/types\";\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\nimport { MobileWrapper } from \"components/organisms/MobileWrapper\";\nimport { BusinessEntity } from \"types/store\";\n\nimport { t } from \"i18next\";\nimport { staticData } from \"./data\";\n\nconst MySwal = withReactContent(Swal);\n\n// This loading is because is annoying the loading spinner when i am just adding a value.\nexport const getBusinesses = (withLoading = true) => {\n  return async (dispatch: any) => {\n    try {\n      withLoading && dispatch(updateLoadingBusinesses(true));\n      const { businesses } = (await apiInstance(\"/business\")).data;\n      const businessFormatted = businesses.map((business: Record<string, string>) => {\n        const id = business.businessId;\n        delete business.businessId;\n        return { id, ...business };\n      });\n\n      dispatch(loadBusinesses(businessFormatted));\n      withLoading && dispatch(updateLoadingBusinesses(false));\n    } catch (e) {\n      dispatch(updateWithErrorBusinesses(true));\n    }\n  };\n};\n\nexport const getBusiness = (businessId: string) => {\n  return async (dispatch: any) => {\n    try {\n      const { businessId: id, name } = (await apiInstance(`/business/${businessId}`)).data;\n      return { id, name };\n    } catch (e) {\n      console.log(e);\n    }\n  };\n};\n\nexport const loadBusinesses = (businesses: Record<string, string>[]) => ({\n  type: types.loadBusinesses,\n  payload: businesses,\n});\n\nexport const updateLoadingBusinesses = (state: boolean) => ({\n  type: types.updateLoadingBusinesses,\n  payload: state,\n});\n\nexport const updateWithErrorBusinesses = (state: boolean) => ({\n  type: types.updateWithErrorBusinesses,\n  payload: state,\n});\n\nexport const createbusiness = () => {\n  return async (dispatch: any, getState: () => any) => {\n    try {\n      const values = await new Promise((resolve, reject) => {\n        MySwal.fire({\n          html: (\n            <MobileWrapper\n              goBackText={staticData(t).business.back}\n              onButtonClick={() => {\n                MySwal.close();\n              }}\n            >\n              <BusinessForm\n                title={staticData(t).business.createBusiness}\n                submitButtonText={staticData(t).business.create}\n                onSubmit={(values) => {\n                  resolve(values);\n                }}\n                onCancel={() => {\n                  MySwal.close();\n                }}\n                cancelButtonText={staticData(t).business.cancel}\n              />\n            </MobileWrapper>\n          ),\n          showConfirmButton: false,\n          target: \".App\",\n          showClass: {\n            popup: \"animate__animated animate__fadeInRight animate__faster\",\n          },\n          hideClass: {\n            popup: \"animate__animated animate__fadeOutLeft animate__faster\",\n          },\n        });\n      });\n      await apiInstance(`/business`, {\n        method: \"POST\",\n        data: JSON.stringify(values),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      dispatch(getBusinesses(false));\n      MySwal.close();\n      Swal.fire({\n        icon: \"success\",\n        title: staticData(t).business.created,\n        showConfirmButton: false,\n        timer: 1500,\n        target: \".App\",\n        customClass: { popup: \"--responsiveResponse\" },\n      });\n    } catch (error) {\n      Swal.fire({\n        icon: \"error\",\n        title: \"Error\",\n        text: \"error\",\n        showConfirmButton: true,\n        timer: 1500,\n        target: \".App\",\n        customClass: { popup: \"--responsiveResponse\" },\n      });\n    }\n  };\n};\n\nexport const startEditBusinessProcess = (business: BusinessEntity = {} as BusinessEntity) => {\n  return async (dispatch: any, getState: () => any) => {\n    try {\n      const currentBusiness = getState().businesses.currentBusiness;\n      const initialValues = currentBusiness || business;\n      const businessId = currentBusiness?.id || business.id;\n\n      const editProcess = async (): Promise<BusinessEntity> =>\n        await new Promise((resolve, reject) => {\n          MySwal.fire({\n            html: (\n              <MobileWrapper\n                onButtonClick={() => {\n                  MySwal.close();\n                }}\n                goBackText={staticData(t).business.back}\n              >\n                <BusinessForm\n                  deleteButtonText={staticData(t).business.deleteBusiness}\n                  onDelete={() => dispatch(startDeleteBusinessProcess(business))}\n                  canDeleteInMobile\n                  initialValues={initialValues}\n                  title={staticData(t).business.edit}\n                  cancelButtonText={staticData(t).business.cancel}\n                  submitButtonText={staticData(t).business.update}\n                  id={business.id}\n                  currentName={business.name}\n                  onSubmit={(values: BusinessEntity) => {\n                    resolve(values);\n                  }}\n                  onCancel={() => {\n                    MySwal.close();\n                  }}\n                />\n              </MobileWrapper>\n            ),\n            showConfirmButton: false,\n            target: \".App\",\n            showClass: {\n              popup: \"animate__animated animate__fadeInRight animate__faster\",\n            },\n            hideClass: {\n              popup: \"animate__animated animate__fadeOutLeft animate__faster\",\n            },\n          });\n        });\n      const updatedValues = await editProcess();\n      await apiInstance(`/business/${businessId}`, {\n        method: \"PUT\",\n        data: JSON.stringify(updatedValues),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      /* dispatch(getBusinesses()); */\n      dispatch(updateBusiness(updatedValues));\n      if (currentBusiness?.id) {\n        dispatch(setCurrentBusiness(updatedValues));\n      }\n\n      MySwal.close();\n      Swal.fire({\n        icon: \"success\",\n        title: staticData(t).business.updated,\n        showConfirmButton: false,\n        timer: 1500,\n        target: \".App\",\n        customClass: { popup: \"--responsiveResponse\" },\n      });\n    } catch (error) {\n      Swal.fire({\n        icon: \"error\",\n        title: \"Error\",\n        text: \"error\",\n        showConfirmButton: false,\n        timer: 1500,\n        target: \".App\",\n        customClass: { popup: \"--responsiveResponse\" },\n      });\n    }\n  };\n};\n\nconst updateBusiness = (business: BusinessEntity) => ({\n  type: types.updateBusiness,\n  payload: business,\n});\n\nexport const startDeleteBusinessProcess = (business: BusinessEntity) => {\n  return async (dispatch: any, getState: () => any) => {\n    try {\n      const currentBusinessId = getState().businesses?.currentBusiness?.id;\n\n      const businessId = currentBusinessId || business.id;\n      const processDelete = async (): Promise<Record<string, boolean>> =>\n        await new Promise((resolve, reject) => {\n          MySwal.fire({\n            html: (\n              <DeleteModalContent\n                elementName={business.name}\n                onConfirmClick={() => {\n                  resolve({\n                    isConfirmed: true,\n                  });\n                }}\n                cancelButtonText={staticData(t).business.cancel}\n                submitButtonText={staticData(t).business.delete}\n                confirmText={staticData(t).business.deleteConfirm}\n                onCancel={() => {\n                  MySwal.close();\n                }}\n              />\n            ),\n            showConfirmButton: false,\n            target: \".App\",\n            showClass: {\n              popup: \"animate__animated animate__fadeInRight animate__faster\",\n            },\n            hideClass: {\n              popup: \"animate__animated animate__fadeOutLeft animate__faster\",\n            },\n            customClass: { htmlContainer: \"--responsive\" },\n          });\n        });\n      const result = await processDelete();\n      if (result.isConfirmed) {\n        await apiInstance(`/business/${businessId}`, {\n          method: \"DELETE\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        });\n        Swal.fire(staticData(t).business.deleted, staticData(t).business.businessDeleted, \"success\");\n        dispatch(removeBusiness(businessId));\n        if (currentBusinessId) {\n          dispatch(setCurrentBusiness({} as BusinessEntity));\n        }\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n};\n\nconst removeBusiness = (businessId: string) => ({\n  type: types.removeBusiness,\n  payload: businessId,\n});\n\nexport const updateCurrentBusiness = (businessId: string) => {\n  return async (dispatch: any, getState: () => any) => {\n    let business = getState().businesses.data.find((business: Record<string, string>) => business.id === businessId);\n\n    if (!business) {\n      business = await dispatch(getBusiness(businessId));\n    }\n    dispatch(setCurrentBusiness(business));\n  };\n};\n\nexport const setCurrentBusiness = (business: BusinessEntity | null) => ({\n  type: types.setCurrentBusiness,\n  payload: business,\n});\n","import { TFunction } from \"i18next\";\nimport { businessStaticData } from \"@i18n/business\";\nimport { generalStaticData } from \"@i18n/general\";\nimport { personStaticData } from \"../../i18n/person\";\n\nconst business = (t: TFunction) => {\n  const businessTranslator = businessStaticData(t);\n  const generalTranslator = generalStaticData(t);\n  return {\n    create: generalTranslator.actions.create,\n    cancel: generalTranslator.actions.cancel,\n    createBusiness: businessTranslator.actions.create,\n    created: businessTranslator.responses.created,\n    edit: businessTranslator.actions.edit,\n    update: generalTranslator.actions.update,\n    updated: businessTranslator.responses.updated,\n    delete: generalTranslator.actions.delete,\n    deleted: generalTranslator.responses.deleted,\n    businessDeleted: businessTranslator.responses.deleted,\n    deleteConfirm: generalTranslator.confirm.delete,\n    deleteBusiness: businessTranslator.actions.delete,\n    back: generalTranslator.actions.back,\n  };\n};\n\nconst persons = (t: TFunction) => {\n  const personsTranslator = personStaticData(t);\n  return {\n    create: personsTranslator.actions.create,\n    created: personsTranslator.responses.created,\n    edit: personsTranslator.actions.edit,\n    updated: personsTranslator.responses.updated,\n    deleted: personsTranslator.responses.deleted,\n    fields: {\n      personName: personsTranslator.fields.personName,\n      role: personsTranslator.fields.role,\n      email: personsTranslator.fields.email,\n      phone: personsTranslator.fields.phone,\n      joinDate: personsTranslator.fields.joinDate,\n    },\n  };\n};\n\nconst general = (t: TFunction) => {\n  const generalTranslator = generalStaticData(t);\n  return {\n    create: generalTranslator.actions.create,\n    cancel: generalTranslator.actions.cancel,\n    delete: generalTranslator.actions.delete,\n    deleted: generalTranslator.responses.deleted,\n    deleteConfirm: generalTranslator.confirm.delete,\n    save: generalTranslator.actions.save,\n  };\n};\n\nexport const staticData = (t: TFunction) => ({\n  business: business(t),\n  persons: persons(t),\n  general: general(t),\n});\n","import { useMobile } from \"hooks/useMobile\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./crud.scoped.scss\";\n\ninterface Props {\n  children: any;\n}\n\nexport const Crud = ({ children }: Props) => {\n  const [isMobile] = useMobile();\n  const [crudClasses, setCrudClasses] = useState(\"t-crud\");\n  useEffect(() => {\n    const dashboardInitClasses = [\"t-crud\"];\n    if (isMobile) {\n      dashboardInitClasses.push(\"--mobile\");\n    }\n    setCrudClasses(dashboardInitClasses.join(\" \"));\n  }, [isMobile]);\n  return <div className={crudClasses}>{children}</div>;\n};\n"],"names":["Button","backgroundColor","textColor","border","width","padding","children","rest","style","className","Input","formik","labelText","htmlFor","id","touched","errors","ConditionalWrapper","condition","wrapper","CrudItem","name","handleEdit","handleDelete","mutedText","withLink","item","hoverable","withActions","canEdit","canDelete","editIconName","to","onClick","e","src","Card","additional1","additional2","CrudList","isLoading","withError","data","currentView","UlClassName","React","map","index","role","phone","email","length","LoadingSpinner","DeleteModalContent","elementName","onCancel","onConfirmClick","cancelButtonText","submitButtonText","confirmText","type","HeaderCrud","title","responsive","actions","useMobile","isMobile","MobileWrapper","onButtonClick","goBackText","businessStaticData","t","create","edit","delete","responses","created","deleted","updated","fields","generalStaticData","cancel","update","save","back","confirm","required","personStaticData","personName","joinDate","invalidEmail","dateShouldBeInPast","apiInstance","Axios","baseURL","process","timeout","headers","defaultInitialValues","BusinessForm","initialValues","onSubmit","canDeleteInMobile","onDelete","deleteButtonText","useState","mobileClass","setMobileClass","useTranslation","useEffect","useFormik","validationSchema","Yup","values","handleSubmit","I","getFieldProps","MySwal","withReactContent","Swal","getBusinesses","withLoading","dispatch","updateLoadingBusinesses","businesses","businessFormatted","business","businessId","loadBusinesses","updateWithErrorBusinesses","getBusiness","console","log","types","payload","state","createbusiness","getState","Promise","resolve","reject","fire","html","staticData","close","createBusiness","showConfirmButton","target","showClass","popup","hideClass","method","JSON","stringify","icon","timer","customClass","text","startEditBusinessProcess","currentBusiness","editProcess","deleteBusiness","startDeleteBusinessProcess","currentName","updatedValues","updateBusiness","setCurrentBusiness","currentBusinessId","processDelete","isConfirmed","deleteConfirm","htmlContainer","businessDeleted","removeBusiness","updateCurrentBusiness","find","businessTranslator","generalTranslator","persons","personsTranslator","general","Crud","crudClasses","setCrudClasses","dashboardInitClasses","push","join"],"sourceRoot":""}