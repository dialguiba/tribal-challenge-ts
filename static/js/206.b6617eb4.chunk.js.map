{"version":3,"file":"static/js/206.b6617eb4.chunk.js","mappings":"2SAmBaA,EAAa,SAAC,GAAiH,IAA/GC,EAA8G,EAA9GA,aAAcC,EAAgG,EAAhGA,aAAcC,EAAkF,EAAlFA,mBAAoBC,EAA8D,EAA9DA,WAAYC,EAAkD,EAAlDA,UAAWC,EAAuC,EAAvCA,cAAeC,EAAwB,EAAxBA,WACjH,GAAmBC,EAAAA,EAAAA,KAAZC,GAAP,eACA,OACE,gBAAKC,UAAWD,EAAW,wBAA0B,eAArD,+BACE,UAACE,EAAA,EAAD,iCACE,SAACC,EAAA,EAAD,CACEC,YAAU,EACVC,MAAOP,EAAWH,WAAWU,MAC7BC,SACE,iCACIN,IAAY,SAAC,IAAD,CAAUO,IAAI,qBAAqBC,MAAO,CAAEC,OAAQ,WAAaC,QAASb,EAA1E,wBACZG,IAAY,SAACW,EAAA,EAAD,CAAQD,QAAS,kBAAMlB,KAAvB,8BAAwCM,EAAWH,WAAWW,QAAQM,YAN1F,wBAWA,SAACC,EAAA,EAAD,CAAUC,KAAMnB,EAAYoB,WAAYrB,EAAoBD,aAAcA,EAAcuB,UAAQ,EAACpB,UAAWA,EAAWqB,aAAcjB,EAArI,uBAECA,IACC,gBAAKC,UAAU,uBAAf,+BACE,SAACU,EAAA,EAAD,CAAQD,QAASlB,EAAjB,8BAAgCM,EAAWH,WAAWW,QAAQM,iB,SCpC7DjB,EAAa,SAACuB,GACzB,IAAMC,GAAqBC,EAAAA,EAAAA,GAAmBF,GAC9C,MAAO,CACLb,MAAOc,EAAmBd,MAC1BC,QAAS,CACPM,OAAQO,EAAmBb,QAAQM,OACnCS,KAAMF,EAAmBb,QAAQe,KACjCC,OAAQH,EAAmBb,QAAQgB,QAErCC,UAAW,CACTC,QAASL,EAAmBI,UAAUC,QACtCC,QAASN,EAAmBI,UAAUE,WAK/B3B,EAAa,SAACoB,GAAD,MAAmB,CAC3CvB,WAAYA,EAAWuB,K,UCwBzB,EAlCmB,WACjB,IAAQA,GAAMQ,EAAAA,EAAAA,GAAe,CAAC,gBAAtBR,EACFS,GAAWC,EAAAA,EAAAA,OACjBC,EAAAA,EAAAA,YAAU,WACRF,GAASG,EAAAA,EAAAA,SACR,CAACH,IAEJ,IAAMhC,GAAaoC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAkBA,EAAMrC,WAAWmB,QAC5DmB,GAAsBF,EAAAA,EAAAA,KAAY,SAACC,GAAD,oBAAkBA,QAAlB,IAAkBA,GAAlB,UAAkBA,EAAOrC,kBAAzB,aAAkB,EAAmBC,aAa7E,OACE,SAACL,EAAD,CACEK,UAAWqC,EACXzC,aANiB,kBAAMmC,GAASO,EAAAA,EAAAA,QAOhCzC,aAXiB,SAAC0C,EAA0BC,GAE9C,OADAA,EAAEC,iBACKV,GAASW,EAAAA,EAAAA,IAA2BH,KAUzCzC,mBAhBe,SAACyC,EAA0BC,GAE5C,OADAA,EAAEC,iBACKV,GAASY,EAAAA,EAAAA,IAAyBJ,KAevCxC,WAAYA,EACZE,cATkB,kBAAM8B,GAASG,EAAAA,EAAAA,QAUjChC,WAAYA,EAAWoB,GAPzB","sources":["templates/SimpleCrud/index.tsx","pages/Businesses/data.ts","pages/Businesses/index.tsx"],"sourcesContent":["import { HeaderCrud } from \"components/organisms/HeaderCrud\";\nimport \"./simple-crud.scoped.scss\";\nimport { CrudList } from \"components/organisms/CrudList\";\nimport { Crud } from \"templates/Crud\";\nimport { Button } from \"components/atoms/Button\";\nimport { useMobile } from \"hooks/useMobile\";\nimport { ReactSVG } from \"react-svg\";\nimport { BusinessEntity } from \"types/store\";\n\ninterface Props {\n  handleCreate: () => void;\n  handleDelete: any;\n  handleEditBusiness: any;\n  businesses: BusinessEntity[];\n  isLoading: boolean;\n  handleRefresh: () => void;\n  staticData: any;\n}\n\nexport const SimpleCrud = ({ handleCreate, handleDelete, handleEditBusiness, businesses, isLoading, handleRefresh, staticData }: Props) => {\n  const [isMobile] = useMobile();\n  return (\n    <div className={isMobile ? \"t-simpleCrud --mobile\" : \"t-simpleCrud\"}>\n      <Crud>\n        <HeaderCrud\n          responsive\n          title={staticData.businesses.title}\n          actions={\n            <>\n              {!isMobile && <ReactSVG src=\"/icons/refresh.svg\" style={{ cursor: \"pointer\" }} onClick={handleRefresh} />}\n              {!isMobile && <Button onClick={() => handleCreate()}>{staticData.businesses.actions.create}</Button>}\n            </>\n          }\n        />\n\n        <CrudList data={businesses} handleEdit={handleEditBusiness} handleDelete={handleDelete} withLink isLoading={isLoading} withActions={!isMobile} />\n\n        {isMobile && (\n          <div className=\"t-simpleCrud__button\">\n            <Button onClick={handleCreate}>{staticData.businesses.actions.create}</Button>\n          </div>\n        )}\n      </Crud>\n    </div>\n  );\n};\n","import { TFunction } from \"i18next\";\nimport { businessStaticData } from \"../../i18n/business\";\n\nexport const businesses = (t: TFunction) => {\n  const businessTranslator = businessStaticData(t);\n  return {\n    title: businessTranslator.title,\n    actions: {\n      create: businessTranslator.actions.create,\n      edit: businessTranslator.actions.edit,\n      delete: businessTranslator.actions.delete,\n    },\n    responses: {\n      created: businessTranslator.responses.created,\n      deleted: businessTranslator.responses.deleted,\n    },\n  };\n};\n\nexport const staticData = (t: TFunction) => ({\n  businesses: businesses(t),\n});\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createbusiness, getBusinesses, startEditBusinessProcess, startDeleteBusinessProcess } from \"store/actions/businessActions\";\n\nimport { SimpleCrud } from \"templates/SimpleCrud\";\nimport { BusinessEntity, State } from \"types/store\";\nimport \"./business.scoped.scss\";\nimport { staticData } from \"./data\";\nimport { useTranslation } from \"react-i18next\";\n\nconst Businesses = () => {\n  const { t } = useTranslation([\"translation\"]);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getBusinesses());\n  }, [dispatch]);\n\n  const businesses = useSelector((state: State) => state.businesses.data);\n  const isBusinessesLoading = useSelector((state: State) => state?.businesses?.isLoading);\n\n  const handleEdit = (business: BusinessEntity, e: Event) => {\n    e.preventDefault();\n    return dispatch(startEditBusinessProcess(business));\n  };\n  const handleDelete = (business: BusinessEntity, e: Event) => {\n    e.preventDefault();\n    return dispatch(startDeleteBusinessProcess(business));\n  };\n  const handleCreate = () => dispatch(createbusiness());\n  const handleRefresh = () => dispatch(getBusinesses());\n\n  return (\n    <SimpleCrud\n      isLoading={isBusinessesLoading}\n      handleCreate={handleCreate}\n      handleDelete={handleDelete}\n      handleEditBusiness={handleEdit}\n      businesses={businesses}\n      handleRefresh={handleRefresh}\n      staticData={staticData(t)}\n    />\n  );\n};\n\nexport default Businesses;\n"],"names":["SimpleCrud","handleCreate","handleDelete","handleEditBusiness","businesses","isLoading","handleRefresh","staticData","useMobile","isMobile","className","Crud","HeaderCrud","responsive","title","actions","src","style","cursor","onClick","Button","create","CrudList","data","handleEdit","withLink","withActions","t","businessTranslator","businessStaticData","edit","delete","responses","created","deleted","useTranslation","dispatch","useDispatch","useEffect","getBusinesses","useSelector","state","isBusinessesLoading","createbusiness","business","e","preventDefault","startDeleteBusinessProcess","startEditBusinessProcess"],"sourceRoot":""}