{"version":3,"file":"static/js/524.61ab4f00.chunk.js","mappings":"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","sources":["components/organisms/PersonForm/index.tsx","store/actions/personActions.tsx","templates/ComplexCrud/index.tsx","pages/Business/data.ts","pages/Business/index.tsx","store/actions/uiActions.tsx"],"sourcesContent":["import { Button } from \"components/atoms/Button\";\nimport { Input } from \"components/atoms/Input\";\nimport { useFormik } from \"formik\";\nimport { useMobile } from \"hooks/useMobile\";\nimport { PersonEntity } from \"types/store\";\nimport * as Yup from \"yup\";\nimport \"./person-form.scoped.scss\";\nimport { useTranslation } from \"react-i18next\";\nimport { personStaticData } from \"../../../i18n/person\";\nimport { generalStaticData } from \"../../../i18n/general\";\n\ninterface Props {\n  initialValues?: PersonEntity;\n  onSubmit: (values: PersonEntity) => void;\n  title: string;\n  onCancel: () => void;\n  submitButtonText: string;\n  onDelete?: () => any;\n  canDeleteInMobile?: boolean;\n  cancelButtonText?: string;\n  deleteButtonText?: string;\n}\n\nconst defaultInitialValues = {\n  id: \"\",\n  name: \"\",\n  role: \"\",\n  email: \"\",\n  phone: \"\",\n  join_date: \"\",\n};\n\nexport const PersonForm = ({\n  initialValues = defaultInitialValues,\n  onSubmit,\n  title,\n  onCancel,\n  submitButtonText,\n  onDelete,\n  canDeleteInMobile = false,\n  cancelButtonText = \"Cancel\",\n  deleteButtonText = \"Delete\",\n}: Props) => {\n  const [isMobile] = useMobile();\n  const { t } = useTranslation([\"translation\"]);\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema: Yup.object({\n      name: Yup.string().required(generalStaticData(t).fields.required),\n      role: Yup.string(),\n      email: Yup.string().required(generalStaticData(t).fields.required).email(personStaticData(t).fields.invalidEmail),\n      phone: Yup.string(),\n      join_date: Yup.date().when((joinDate, schema) => joinDate && schema.max(new Date(), personStaticData(t).fields.dateShouldBeInPast)),\n    }),\n    onSubmit: (values) => onSubmit(values),\n  });\n  return (\n    <div className=\"o-personForm\">\n      <h3 className=\"o-personForm__title\">{title}</h3>\n\n      <form onSubmit={formik.handleSubmit}>\n        <Input formik={formik} type=\"text\" labelText={personStaticData(t).fields.personName} id=\"name\" {...formik.getFieldProps(\"name\")} />\n        <Input formik={formik} type=\"text\" labelText={personStaticData(t).fields.role} id=\"role\" {...formik.getFieldProps(\"role\")} />\n        <Input formik={formik} type=\"email\" labelText={personStaticData(t).fields.email} id=\"email\" {...formik.getFieldProps(\"email\")} />\n        <Input formik={formik} type=\"tel\" labelText={personStaticData(t).fields.phone} id=\"phone\" {...formik.getFieldProps(\"phone\")} />\n        <Input formik={formik} type=\"date\" labelText={personStaticData(t).fields.joinDate} id=\"join_date\" {...formik.getFieldProps(\"join_date\")} />\n\n        <div className=\"o-personForm__buttons\">\n          {!isMobile && (\n            <Button type=\"button\" onClick={onCancel} backgroundColor=\"#F8F8F8\" textColor=\"Black\">\n              {cancelButtonText}\n            </Button>\n          )}\n          {isMobile && canDeleteInMobile && (\n            <Button type=\"button\" onClick={onDelete} backgroundColor=\"#F8F8F8\" textColor=\"#E32900\" border=\"solid 1px #E32900\">\n              {deleteButtonText}\n            </Button>\n          )}\n          <Button type=\"submit\">{submitButtonText}</Button>\n        </div>\n      </form>\n    </div>\n  );\n};\n","import { DeleteModalContent } from \"components/organisms/DeleteModalContent\";\nimport { PersonForm } from \"components/organisms/PersonForm\";\nimport { apiInstance } from \"services/axios\";\nimport { types } from \"store/types\";\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\nimport { getBusiness } from \"./businessActions\";\nimport { MobileWrapper } from \"components/organisms/MobileWrapper\";\nimport { PersonEntity } from \"types/store\";\nimport { staticData } from \"./data\";\nimport { t } from \"i18next\";\n\nconst MySwal = withReactContent(Swal);\n\nexport const updateCurrentPersons = (businessId: string) => {\n  return async (dispatch: any, getState: () => any) => {\n    dispatch(updateLoadingPersons(true));\n    let business = getState().businesses.data.find((business: Record<string, string>) => business.id === businessId);\n    if (!business) {\n      business = await dispatch(getBusiness(businessId));\n    }\n    const persons = await dispatch(getPersons(businessId));\n\n    dispatch(setCurrentPersons(persons));\n    dispatch(updateLoadingPersons(false));\n  };\n};\n\nexport const updateLoadingPersons = (state: boolean) => ({\n  type: types.updateLoadingPersons,\n  payload: state,\n});\n\nexport const updateWithErrorBusinesses = (state: boolean) => ({\n  type: types.updateWithErrorBusinesses,\n  payload: state,\n});\n\nconst getPersons = (businessId: string) => {\n  return async (dispatch: any, getState: () => any) => {\n    try {\n      const { persons } = (await apiInstance.get(`business/${businessId}/persons`)).data;\n      const personsFormatted = persons.map((person: Record<string, string>) => {\n        const id = person.personId;\n        delete person.personId;\n        return { id, ...person };\n      });\n\n      return personsFormatted;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n};\n\nexport const setCurrentPersons = (person: PersonEntity) => ({\n  type: types.setCurrentPerson,\n  payload: person,\n});\n\nexport const startDeletePersonProcess = (person: PersonEntity) => {\n  return async (dispatch: any, getState: () => any) => {\n    try {\n      const result = (): Promise<Record<string, boolean>> =>\n        new Promise((resolve, reject) => {\n          MySwal.fire({\n            html: (\n              <DeleteModalContent\n                cancelButtonText={staticData(t).general.cancel}\n                confirmText={staticData(t).general.deleteConfirm}\n                elementName={person.name}\n                onConfirmClick={() => {\n                  resolve({\n                    isConfirmed: true,\n                  });\n                }}\n                onCancel={() => {\n                  MySwal.close();\n                }}\n              />\n            ),\n            showConfirmButton: false,\n            target: \".App\",\n            showClass: {\n              popup: \"animate__animated animate__fadeInRight animate__faster\",\n            },\n            hideClass: {\n              popup: \"animate__animated animate__fadeOutLeft animate__faster\",\n            },\n            customClass: { htmlContainer: \"--responsive\" },\n          });\n        });\n\n      if ((await result()).isConfirmed) {\n        console.log(getState);\n        const currentBusinessId = getState().businesses.currentBusiness.id;\n        console.log(currentBusinessId);\n        await apiInstance(`/business/${currentBusinessId}/persons/${person.id}`, {\n          method: \"DELETE\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        });\n        Swal.fire(staticData(t).general.deleted, staticData(t).persons.deleted, \"success\");\n        dispatch(removePerson(person.id));\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n};\n\nconst removePerson = (personId: string) => ({\n  type: types.removePerson,\n  payload: personId,\n});\n\nexport const startEditPersonProcess = (person: PersonEntity) => {\n  return async (dispatch: any, getState: () => any) => {\n    try {\n      const currentBusinessId = getState().businesses.currentBusiness.id;\n      const editProcess = async (): Promise<PersonEntity> =>\n        await new Promise((resolve, reject) => {\n          MySwal.fire({\n            html: (\n              <MobileWrapper\n                onButtonClick={() => {\n                  MySwal.close();\n                }}\n                goBackText={staticData(t).business.back}\n              >\n                <PersonForm\n                  cancelButtonText={staticData(t).general.cancel}\n                  deleteButtonText={staticData(t).general.delete}\n                  onDelete={() => dispatch(startDeletePersonProcess(person))}\n                  canDeleteInMobile\n                  initialValues={person}\n                  title={staticData(t).persons.edit}\n                  submitButtonText={staticData(t).general.save}\n                  onSubmit={(values) => {\n                    resolve(values);\n                  }}\n                  onCancel={() => {\n                    MySwal.close();\n                  }}\n                />\n              </MobileWrapper>\n            ),\n            showConfirmButton: false,\n            target: \".App\",\n            showClass: {\n              popup: \"animate__animated animate__fadeInRight animate__faster\",\n            },\n            hideClass: {\n              popup: \"animate__animated animate__fadeOutLeft animate__faster\",\n            },\n          });\n        });\n      const updatedValues = await editProcess();\n      await apiInstance(`/business/${currentBusinessId}/persons/${person.id}`, {\n        method: \"PUT\",\n        data: JSON.stringify(updatedValues),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      dispatch(updatePerson(updatedValues));\n      MySwal.close();\n      Swal.fire({\n        icon: \"success\",\n        title: staticData(t).persons.updated,\n        showConfirmButton: false,\n        target: \".App\",\n        timer: 1500,\n        customClass: { popup: \"--responsiveResponse\" },\n      });\n    } catch (error) {\n      Swal.fire({\n        icon: \"error\",\n        title: \"Error\",\n        text: \"error\",\n        showConfirmButton: true,\n        target: \".App\",\n        timer: 1500,\n        customClass: { popup: \"--responsiveResponse\" },\n      });\n    }\n  };\n};\n\nconst updatePerson = (person: PersonEntity) => ({\n  type: types.updatePerson,\n  payload: person,\n});\n\nexport const startCreatePersonProcess = () => {\n  return async (dispatch: any, getState: () => any) => {\n    try {\n      const currentBusinessId = getState().businesses.currentBusiness.id;\n      const values = await new Promise((resolve, reject) => {\n        MySwal.fire({\n          html: (\n            <MobileWrapper\n              goBackText={staticData(t).business.back}\n              onButtonClick={() => {\n                MySwal.close();\n              }}\n            >\n              <PersonForm\n                title={staticData(t).persons.create}\n                submitButtonText={staticData(t).persons.create}\n                cancelButtonText={staticData(t).business.cancel}\n                onSubmit={(values) => {\n                  resolve(values);\n                }}\n                onCancel={() => {\n                  MySwal.close();\n                }}\n              />\n            </MobileWrapper>\n          ),\n          showConfirmButton: false,\n          target: \".App\",\n          showClass: {\n            popup: \"animate__animated animate__fadeInRight animate__faster\",\n          },\n          hideClass: {\n            popup: \"animate__animated animate__fadeOutLeft animate__faster\",\n          },\n        });\n      });\n      await apiInstance(`/business/${currentBusinessId}/persons`, {\n        method: \"POST\",\n        data: JSON.stringify(values),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      const persons = await dispatch(getPersons(currentBusinessId));\n      dispatch(updatePersons(persons));\n      MySwal.close();\n      Swal.fire({\n        icon: \"success\",\n        title: staticData(t).persons.created,\n        timer: 1500,\n        target: \".App\",\n        customClass: { popup: \"--responsiveResponse\" },\n      });\n    } catch (error) {\n      Swal.fire({\n        icon: \"error\",\n        title: \"Error\",\n        text: \"error\",\n        showConfirmButton: true,\n        timer: 1500,\n        target: \".App\",\n        customClass: { popup: \"--responsiveResponse\" },\n      });\n    }\n  };\n};\n\nconst updatePersons = (person: Record<string, string>) => ({\n  type: types.updatePersons,\n  payload: person,\n});\n","import { Button } from \"components/atoms/Button\";\nimport { CrudList } from \"components/organisms/CrudList\";\nimport { HeaderCrud } from \"components/organisms/HeaderCrud\";\nimport { useMobile } from \"hooks/useMobile\";\nimport { ReactSVG } from \"react-svg\";\nimport { Crud } from \"templates/Crud\";\nimport \"./complexCrud.scoped.scss\";\nimport { BusinessEntity, PersonEntity } from \"../../types/store\";\n\ninterface Props {\n  title: string;\n  persons: PersonEntity[];\n  handleUpdateView: (view: number) => void;\n  currentView: number;\n  handleDelete: (person: PersonEntity) => (dispatch: any, getState: () => any) => Promise<void>;\n  handleEditBusiness: (business?: BusinessEntity) => (dispatch: any, getState: () => any) => Promise<void>;\n  handleEditPerson: (person: PersonEntity) => (dispatch: any, getState: () => any) => Promise<void>;\n  handleCreate: () => void;\n  isLoading: boolean;\n  handleRefresh: () => void;\n  staticData: any;\n}\n\nexport const ComplexCrud = ({\n  title,\n  persons,\n  handleUpdateView,\n  currentView,\n  handleDelete,\n  handleEditBusiness,\n  handleEditPerson,\n  handleCreate,\n  isLoading,\n  handleRefresh,\n  staticData,\n}: Props) => {\n  const [isMobile] = useMobile();\n\n  const changeView = () => {\n    currentView === 0 ? handleUpdateView(1) : handleUpdateView(0);\n  };\n\n  return (\n    <div className={isMobile ? \"t-complexCrud --mobile\" : \"t-complexCrud\"}>\n      <Crud>\n        <HeaderCrud\n          responsive\n          title={title}\n          actions={\n            <>\n              {!isMobile && <ReactSVG src=\"/icons/refresh.svg\" style={{ cursor: \"pointer\" }} onClick={handleRefresh} />}\n              {isMobile && <ReactSVG src=\"/icons/pen2.svg\" onClick={() => handleEditBusiness()} />}\n              {!isMobile && (\n                <ReactSVG src={`${currentView === 0 ? \"/icons/squares.svg\" : \"/icons/list.svg\"}`} onClick={changeView} style={{ cursor: \"pointer\" }} />\n              )}\n              {!isMobile && <Button onClick={() => handleCreate()}>{staticData.persons.actions.create}</Button>}\n            </>\n          }\n        >\n          {isMobile && (\n            <HeaderCrud\n              title={staticData.persons.title}\n              actions={\n                <>\n                  <ReactSVG src={`${currentView === 0 ? \"/icons/squares.svg\" : \"/icons/list.svg\"}`} onClick={changeView} />\n                </>\n              }\n            />\n          )}\n        </HeaderCrud>\n        <CrudList\n          canDelete={!isMobile}\n          data={persons}\n          currentView={currentView}\n          handleDelete={handleDelete}\n          handleEdit={handleEditPerson}\n          isLoading={isLoading}\n          editIconName={isMobile ? \"pen2\" : \"pen\"}\n        />\n        {isMobile && (\n          <div className=\"t-complexCrud__button\">\n            <Button onClick={handleCreate}>{staticData.persons.actions.create}</Button>\n          </div>\n        )}\n      </Crud>\n    </div>\n  );\n};\n","import { TFunction } from \"i18next\";\nimport { businessStaticData } from \"../../i18n/business\";\nimport { generalStaticData } from \"../../i18n/general\";\nimport { personStaticData } from \"../../i18n/person\";\n\nexport const business = (t: TFunction) => {\n  const businessTranslator = businessStaticData(t);\n  const generalTranslator = generalStaticData(t);\n  return {\n    title: businessTranslator.title,\n    actions: {\n      create: businessTranslator.actions.create,\n      edit: businessTranslator.actions.edit,\n      delete: businessTranslator.actions.delete,\n      back: generalTranslator.actions.back,\n    },\n    responses: {\n      created: businessTranslator.responses.created,\n      deleted: businessTranslator.responses.deleted,\n    },\n  };\n};\n\nexport const persons = (t: TFunction) => {\n  const personsTranslator = personStaticData(t);\n  return {\n    title: personsTranslator.title,\n    actions: {\n      create: personsTranslator.actions.create,\n    },\n  };\n};\n\nexport const staticData = (t: TFunction) => ({\n  business: business(t),\n  persons: persons(t),\n});\n","import { MobileWrapper } from \"components/organisms/MobileWrapper\";\nimport { useLayoutEffect, useRef } from \"react\";\nimport { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { setCurrentBusiness, startEditBusinessProcess, updateCurrentBusiness } from \"store/actions/businessActions\";\nimport {\n  startCreatePersonProcess,\n  startEditPersonProcess,\n  setCurrentPersons,\n  updateCurrentPersons,\n  startDeletePersonProcess,\n} from \"store/actions/personActions\";\nimport { updateCurrentView } from \"store/actions/uiActions\";\nimport { ComplexCrud } from \"templates/ComplexCrud\";\nimport { useNavigate } from \"react-router-dom\";\nimport { BusinessEntity, PersonEntity, State } from \"types/store\";\nimport { staticData } from \"./data\";\nimport { useTranslation } from \"react-i18next\";\n\nconst Business = () => {\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { t } = useTranslation([\"translation\"]);\n  useEffect(() => {\n    if (id) {\n      dispatch(updateCurrentBusiness(id));\n      dispatch(updateCurrentPersons(id));\n    }\n    return () => {\n      dispatch(setCurrentBusiness(null));\n      dispatch(setCurrentPersons([] as unknown as PersonEntity));\n    };\n  }, [id, dispatch]);\n\n  const currentBusiness = useSelector((state: State) => state?.businesses?.currentBusiness);\n  const firstUpdate = useRef(true);\n  useLayoutEffect(() => {\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    } else {\n      if (Object.entries(currentBusiness).length === 0) {\n        /* console.log(\"Ya no hay nada. redirigr\"); */\n        navigate(\"/\");\n      }\n    }\n  }, [currentBusiness, navigate]);\n\n  const name = useSelector((state: State) => state?.businesses?.currentBusiness?.name);\n  const persons = useSelector((state: State) => state?.persons?.currentPersons);\n  const currentView = useSelector((state: State) => state?.ui?.currentView);\n  const isBusinessLoading = useSelector((state: State) => state?.businesses?.isLoading);\n  const isPersonsLoading = useSelector((state: State) => state?.persons?.isLoading);\n  const currentBusinesId = useSelector((state: State) => state?.businesses?.currentBusiness?.id);\n  const handleUpdateView = (view: number) => dispatch(updateCurrentView(view));\n  const handleCreate = () => dispatch(startCreatePersonProcess());\n  const handleDelete = (person: PersonEntity) => dispatch(startDeletePersonProcess(person));\n  const handleEditPerson = (person: PersonEntity) => dispatch(startEditPersonProcess(person));\n  const handleEditBusiness = (business?: BusinessEntity) => dispatch(startEditBusinessProcess(business));\n  const handleRefresh = () => dispatch(updateCurrentPersons(currentBusinesId));\n\n  return (\n    <MobileWrapper onButtonClick={() => navigate(\"/overview\")} goBackText={staticData(t).business.actions.back}>\n      <ComplexCrud\n        title={name}\n        persons={persons}\n        handleUpdateView={handleUpdateView}\n        currentView={currentView}\n        handleCreate={handleCreate}\n        handleDelete={handleDelete}\n        handleEditBusiness={handleEditBusiness}\n        isLoading={isBusinessLoading || isPersonsLoading}\n        handleEditPerson={handleEditPerson}\n        handleRefresh={handleRefresh}\n        staticData={staticData(t)}\n      />\n    </MobileWrapper>\n  );\n};\n\nexport default Business;\n","import { types } from \"store/types\";\n\nexport const updateCurrentView = (view: number) => ({\n  type: types.updateCurrentView,\n  payload: view,\n});\n"],"names":["defaultInitialValues","id","name","role","email","phone","join_date","PersonForm","initialValues","onSubmit","title","onCancel","submitButtonText","onDelete","canDeleteInMobile","cancelButtonText","deleteButtonText","useMobile","isMobile","t","useTranslation","formik","useFormik","validationSchema","Yup","required","generalStaticData","fields","personStaticData","invalidEmail","when","joinDate","schema","max","Date","dateShouldBeInPast","values","className","handleSubmit","Input","I","type","labelText","personName","getFieldProps","Button","onClick","backgroundColor","textColor","border","MySwal","withReactContent","Swal","updateCurrentPersons","businessId","dispatch","getState","updateLoadingPersons","businesses","data","find","business","getBusiness","getPersons","persons","setCurrentPersons","state","types","payload","apiInstance","personsFormatted","map","person","personId","console","log","startDeletePersonProcess","result","Promise","resolve","reject","fire","html","DeleteModalContent","staticData","general","cancel","confirmText","deleteConfirm","elementName","onConfirmClick","isConfirmed","close","showConfirmButton","target","showClass","popup","hideClass","customClass","htmlContainer","currentBusinessId","currentBusiness","method","headers","deleted","removePerson","updatePerson","updatePersons","ComplexCrud","handleUpdateView","currentView","handleDelete","handleEditBusiness","handleEditPerson","handleCreate","isLoading","handleRefresh","changeView","Crud","HeaderCrud","responsive","actions","src","style","cursor","create","CrudList","canDelete","handleEdit","editIconName","businessTranslator","businessStaticData","generalTranslator","edit","delete","back","responses","created","personsTranslator","useParams","useDispatch","navigate","useNavigate","useEffect","updateCurrentBusiness","setCurrentBusiness","useSelector","firstUpdate","useRef","useLayoutEffect","current","Object","entries","length","currentPersons","ui","isBusinessLoading","isPersonsLoading","currentBusinesId","MobileWrapper","onButtonClick","goBackText","view","updateCurrentView","JSON","stringify","icon","timer","text","startEditBusinessProcess","editProcess","save","updatedValues","updated","startEditPersonProcess"],"sourceRoot":""}